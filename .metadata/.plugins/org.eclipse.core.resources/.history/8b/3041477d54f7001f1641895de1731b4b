package com.mindfire.performancereviewservice.service.imp;

import java.util.List;

import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mindfire.performancereviewservice.entity.Feedback;
import com.mindfire.performancereviewservice.exception.FeedbackException;
import com.mindfire.performancereviewservice.repository.FeedbackRepository;

import com.mindfire.performancereviewservice.service.FeedbackService;
import com.shared.enums.Rating;
import com.shared.request.FeedbackRequest;
import com.shared.response.FeedbackResponse;

@Service
public class FeedbackServiceImpl implements FeedbackService {

	@Autowired
	private FeedbackRepository feedbackRepository;

	@Autowired
	private ModelMapper modelMapper;

	@Override
	public FeedbackResponse addFeedback(FeedbackRequest feedbackRequest) {
		try {
			Feedback feedback = new Feedback();
			feedback.setFeedback(feedbackRequest.getFeedback());
			feedback.setRating(Rating.valueOf(feedbackRequest.getRating().toUpperCase()));
			feedback.setEmployeeId(feedbackRequest.getEmployeeId());
			Feedback savedFeedback = feedbackRepository.save(feedback);
			return modelMapper.map(savedFeedback, FeedbackResponse.class);
		} catch (Exception e) {
			throw new FeedbackException("Error while adding feedback. Please try again later.");
		}
	}

	@Override
	public List<FeedbackResponse> getFeedbackByEmployeeId(Long employeeId) {

		List<Feedback> feedbackList = feedbackRepository.findByEmployeeId(employeeId);

		if (feedbackList.isEmpty()) {
			throw new FeedbackException("No feedback found for employee with ID: " + employeeId);
		}

		return modelMapper.map(feedbackList, new TypeToken<List<FeedbackResponse>>() {
		}.getType());
	}

	@Override
	public FeedbackResponse getLatestFeedbackByEmployeeId(Long employeeId) {
		Feedback latestFeedback = feedbackRepository.findLatestFeedbackByEmployeeId(employeeId);

		if (latestFeedback == null) {
			throw new FeedbackException("No feedback found for employee with ID: " + employeeId);
		}

		return modelMapper.map(latestFeedback, FeedbackResponse.class);
	}

	@Override
	public List<FeedbackResponse> getFeedbacksForEmployeeList(List<Long> employeeIds) {
	    if (employeeIds.isEmpty()) {
	        throw new FeedbackException("Employee ID list cannot be empty");
	    }

	    try {
	        // Check if all employee IDs provided are valid (present in the feedback repository)
	        checkEmployeeIdsExistInFeedback(employeeIds);

	        // Fetch feedback for the given employee IDs
	        List<Feedback> feedbackList = feedbackRepository.findByEmployeeIdIn(employeeIds);

	        if (feedbackList.isEmpty()) {
	            throw new FeedbackException("No feedbacks found for the given employee IDs");
	        }

	        return modelMapper.map(feedbackList, new TypeToken<List<FeedbackResponse>>(){}.getType());
	    } catch (Exception e) {
	        throw new FeedbackException("Error while retrieving feedbacks for employees. Please try again later.");
	    }
	}

	/**
	 * Private method to check whether each employee ID exists in the feedback repository
	 */
	private void checkEmployeeIdsExistInFeedback(List<Long> employeeIds) {
	    List<Long> employeeIdsInFeedback = feedbackRepository.findDistinctEmployeeIds(employeeIds);

	    for (Long employeeId : employeeIds) {
	        if (!employeeIdsInFeedback.contains(employeeId)) {
	            throw new FeedbackException("No feedback found for employee ID: " + employeeId);
	        }
	    }
	}


}
