package com.mindfire.performancereviewservice.service.imp;

@Service
public class FeedbackServiceImpl implements FeedbackService {

    @Autowired
    private FeedbackRepository feedbackRepository;

    @Autowired
    private ModelMapper modelMapper;

    @Override
    public FeedbackResponse addFeedback(FeedbackRequest feedbackRequest) {
        try {
            // Map FeedbackRequest to Feedback entity
            Feedback feedback = modelMapper.map(feedbackRequest, Feedback.class);
            // Save the feedback to the database
            Feedback savedFeedback = feedbackRepository.save(feedback);
            // Return the saved FeedbackResponse
            return modelMapper.map(savedFeedback, FeedbackResponse.class);
        } catch (Exception e) {
            throw new FeedbackException("Error while adding feedback. Please try again later.");
        }
    }

    @Override
    public List<FeedbackResponse> getFeedbackByEmployeeId(Long employeeId) {
        try {
            List<Feedback> feedbackList = feedbackRepository.findByEmployeeId(employeeId);
            if (feedbackList.isEmpty()) {
                throw new FeedbackException("No feedback found for employee with ID: " + employeeId);
            }
            // Convert feedback list to FeedbackResponse list
            return feedbackList.stream()
                    .map(feedback -> modelMapper.map(feedback, FeedbackResponse.class))
                    .collect(Collectors.toList());
        } catch (Exception e) {
            throw new FeedbackException("Error while retrieving feedback for employee with ID: " + employeeId);
        }
    }

    @Override
    public FeedbackResponse getLatestFeedbackByEmployeeId(Long employeeId) {
        try {
            Feedback feedback = feedbackRepository.findTopByEmployeeIdOrderByFeedbackIdDesc(employeeId);
            if (feedback == null) {
                throw new FeedbackException("No feedback found for employee with ID: " + employeeId);
            }
            // Return the latest feedback mapped to FeedbackResponse
            return modelMapper.map(feedback, FeedbackResponse.class);
        } catch (Exception e) {
            throw new FeedbackException("Error while retrieving latest feedback for employee with ID: " + employeeId);
        }
    }

   
    
}
