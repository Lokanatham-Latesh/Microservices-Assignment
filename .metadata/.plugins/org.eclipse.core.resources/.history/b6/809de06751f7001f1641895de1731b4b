package com.employee.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.employee.request.EmployeeDepartmentRequest;
import com.employee.request.EmployeeRequest;
import com.employee.response.EmployeeResponse;
import com.employee.response.EmployeeWithDepartmentResponse;
import com.employee.service.EmployeeService;
import com.shared.request.FeedbackRequest;
import com.shared.response.FeedbackResponse;

import io.swagger.v3.oas.annotations.media.Content;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;

@RestController
@RequestMapping("/api/v1")
@CrossOrigin(origins = "http://localhost:5173")
@Tag(name = "[1] Employee Management API", description = "Handles operations related to employee management, including CRUD operations, salary updates, and listing employees")
public class EmployeeController {

	@Autowired
	private EmployeeService employeeService;

	@Operation(summary = "[1] This API is used to Add a New Employee")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Employee successfully created", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = EmployeeResponse.class))),
			@ApiResponse(responseCode = "400", description = "Invalid request data", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@PostMapping(value = "employees")
	public ResponseEntity<EmployeeResponse> addEmployee(@Valid @RequestBody EmployeeRequest employee) {

		return ResponseEntity.ok(employeeService.addEmployee(employee));
	}

	@Operation(summary = "[2] This API is used to Update an Existing Employee's Salary")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Employee salary successfully updated", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = EmployeeResponse.class))),
			@ApiResponse(responseCode = "400", description = "Invalid salary or employee ID", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@PutMapping(value = "/employees/{id}")
	public ResponseEntity<EmployeeResponse> updateEmployee(
	        @PathVariable Long id, @RequestBody EmployeeRequest employeeRequest) {
	    return ResponseEntity.ok(employeeService.updateEmployee(id, employeeRequest));
	}

	@Operation(summary = "[3] This API is used to Delete an Employee by ID")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Employee successfully deleted", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
			@ApiResponse(responseCode = "404", description = "Employee not found", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@DeleteMapping(value = "employees/{id}")
	public ResponseEntity<Boolean> deleteEmployee(
			@PathVariable @NotNull(message = "Employee ID cannot be null") Long id) {
		return ResponseEntity.ok(employeeService.deleteEmployee(id));
	}

	@Operation(summary = "[4] This API is used to Retrieve a List of All Employees")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "List of all employees retrieved successfully", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = EmployeeResponse.class))),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@GetMapping(value = "employees")
	public ResponseEntity<List<EmployeeResponse>> getAllEmployees() {

		return ResponseEntity.ok(employeeService.getAllEmployees());

	}

	@Operation(summary = "[5] This API is used to Retrieve an Employee by ID")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Employee retrieved successfully", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = EmployeeResponse.class))),
			@ApiResponse(responseCode = "404", description = "Employee not found", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@GetMapping(value = "employees/{id}")
	public ResponseEntity<EmployeeResponse> getEmployeeById(
			@PathVariable @NotNull(message = "Employee ID cannot be null") Long id) {

		return ResponseEntity.ok(employeeService.getEmployeeById(id));

	}

	@Operation(summary = "[6] This API is used to Retrieve Employees with Salary Greater Than a Certain Value")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Employees with salary greater than specified retrieved", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = EmployeeResponse.class))),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@GetMapping(value = "employees/salary/{salary}")
	public ResponseEntity<List<EmployeeResponse>> getEmployeesWithSalaryGreaterThan(@PathVariable Double salary) {
		return ResponseEntity.ok(employeeService.getEmployeesWithSalaryGreaterThan(salary));

	}

	@Operation(summary = "[7] This API is used to Retrieve the Top 3 Highest Paid Employees")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Top 3 highest paid employees retrieved", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = EmployeeResponse.class))),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@GetMapping(value = "employees/top-salaries")
	public ResponseEntity<List<EmployeeResponse>> getTopThreeHighestPaidEmployees() {

		return ResponseEntity.ok(employeeService.getTop3HighestPaidEmployees());
	}

	@Operation(summary = "[8] This API is used to Add Employee to Departments")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Employee successfully assigned to departments", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
			@ApiResponse(responseCode = "400", description = "Invalid department assignment", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@PostMapping(value = "/employees/assign-departments")
	public ResponseEntity<String> AddEmployeeToDepartments(
			@RequestBody EmployeeDepartmentRequest employeeDepartmentRequest) {
		return ResponseEntity.ok(employeeService.AddEmployeeToDepartments(employeeDepartmentRequest));
	}

	@Operation(summary = "[9] This API is used to Retrieve the List of Employees who joined in last 6 months")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Employees who joined in the last 6 months retrieved", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = EmployeeResponse.class))),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@GetMapping(value = "employees/recent-joiners")
	public ResponseEntity<List<EmployeeResponse>> getRecentJoiners() {
		return ResponseEntity.ok(employeeService.getRecentJoiners());
	}

	@Operation(summary = "[10] This API is used to Retrieve the List of Employees with Pagination")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Paginated list of employees retrieved", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = EmployeeResponse.class))),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@GetMapping(value = "employees/paginated")
	public ResponseEntity<Page<EmployeeResponse>> getPaginatedEmployees(
	        @RequestParam(defaultValue = "0") int page, 
	        @RequestParam(defaultValue = "5") int size) {
	    
	    Page<EmployeeResponse> employeeResponses = employeeService.getPaginatedEmployees(page, size);
	    return ResponseEntity.ok(employeeResponses);
	}

	@Operation(summary = "[11] This API is used to Retrieve Employees along with their Department Details")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Employees with departments retrieved", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = EmployeeWithDepartmentResponse.class))),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@GetMapping(value = "employees/with-departments")
	public ResponseEntity<List<EmployeeWithDepartmentResponse>> getEmployeesWithDepartments() {
		return ResponseEntity.ok(employeeService.getEmployeesWithDepartments());
	}
	
	@GetMapping(value = "employees/with-department/{id}")
	public ResponseEntity<EmployeeWithDepartmentResponse> getEmployeeWithDepartments(@PathVariable Long id) {
	    return ResponseEntity.ok(employeeService.getEmployeeWithDepartments(id));
	}


	@Operation(summary = "[12] This API is used to Transfer Employees from One Department to Another")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Employee successfully transferred", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
			@ApiResponse(responseCode = "400", description = "Invalid transfer request", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@PutMapping(value = "employees/transfer/{employeeId}")
	public ResponseEntity<String> transferEmployee(
			@PathVariable @NotNull(message = "Employee ID cannot be null") Long employeeId,
			@RequestParam @NotNull(message = "From Department ID cannot be null") Long fromDepartmentId,
			@RequestParam @NotNull(message = "To Department ID cannot be null") Long toDepartmentId) {
		return ResponseEntity
				.ok(employeeService.transferEmployeesBetweenDepartments(fromDepartmentId, toDepartmentId, employeeId));

	}

	@Operation(summary = "[13] This API is used to update salaries for all employees by a given percentage")
	@ApiResponses({
			@ApiResponse(responseCode = "200", description = "Salaries successfully updated for all employees", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
			@ApiResponse(responseCode = "400", description = "Invalid percentage", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
			@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	@PutMapping(value = "employees/bulk-update-salaries")
	public ResponseEntity<String> bulkSalaryUpdate(@RequestParam double percentage) {
		return ResponseEntity.ok(employeeService.bulkSalaryUpdate(percentage));
	}
	
	
	 @Operation(summary = "[14] This API is used to Add Feedback for an Employee")
	    @ApiResponses({
	            @ApiResponse(responseCode = "200", description = "Feedback successfully added", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = FeedbackResponse.class))),
	            @ApiResponse(responseCode = "400", description = "Invalid feedback data", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
	            @ApiResponse(responseCode = "404", description = "Employee not found", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
	            @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	    @PostMapping(value = "employees/feedback", consumes = MediaType.APPLICATION_JSON_VALUE)
	    public ResponseEntity<FeedbackResponse> addFeedback(
	            @Valid @RequestBody FeedbackRequest feedbackRequest) {
	        FeedbackResponse feedbackResponse = employeeService.addFeedback(feedbackRequest);
	        return ResponseEntity.ok(feedbackResponse);
	    }
	 
	 
	 @Operation(summary = "[15] This API is used to Retrieve Feedback for an Employee")
	 @ApiResponses({
	         @ApiResponse(responseCode = "200", description = "Feedback retrieved successfully", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = FeedbackResponse.class))),
	         @ApiResponse(responseCode = "404", description = "No feedback found for employee", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)),
	         @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)) })
	 @GetMapping(value = "employees/feedback/{employeeId}")
	 public ResponseEntity<List<FeedbackResponse>> getEmployeeFeedback(@PathVariable Long employeeId) {
	     List<FeedbackResponse> feedbackResponses = employeeService.getEmployeeFeedback(employeeId);
	     return ResponseEntity.ok(feedbackResponses);
	 }

	 
	 

}
