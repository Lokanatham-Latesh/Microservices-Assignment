package com.mindfire.apigateway.config;

import org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;
import org.springframework.cloud.gateway.filter.ratelimit.RedisRateLimiter;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import reactor.core.publisher.Mono;

@Configuration
public class GateWayConfig {
	 @Bean
	    public RouteLocator routeLocator(RouteLocatorBuilder builder) {
	        return builder.routes()
	                .route("all-services", r -> r.path("/**") // Apply rate limiting to all routes
	                        .filters(f -> f.requestRateLimiter().configure(c -> c.setRateLimiter(redisRateLimiter())))
	                        .uri("lb://ANY-SERVICE")) // Load balancer for all services
	                .build();
	    }

	    @Bean
	    public RedisRateLimiter redisRateLimiter() {
	        // Configuring rate limiting (Replenish Rate: 5 req/sec, Burst Capacity: 10 requests)
	        return new RedisRateLimiter(5, 10);
	    }

	    @Bean
	    public KeyResolver keyResolver() {
	        // Using Client IP address as the key for rate limiting
	        return exchange -> Mono.just(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress());
	    }
	
	
}
