package com.mindfire.performancereviewservice.service.imp;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;

import com.mindfire.performancereviewservice.entity.Feedback;
import com.mindfire.performancereviewservice.exception.FeedbackException;
import com.mindfire.performancereviewservice.repository.FeedbackRepository;
import com.mindfire.performancereviewservice.request.FeedbackRequest;
import com.mindfire.performancereviewservice.response.FeedbackResponse;
import com.mindfire.performancereviewservice.service.FeedbackService;

public class FeedbackServiceImp implements FeedbackService {
	
	 @Autowired
	    private FeedbackRepository feedbackRepository;

	    @Autowired
	    private ModelMapper modelMapper;

	@Override
	public FeedbackResponse addFeedback(FeedbackRequest feedbackRequest) {
		try {
            Feedback feedback = modelMapper.map(feedbackRequest, Feedback.class);
            Feedback savedFeedback = feedbackRepository.save(feedback);
            return modelMapper.map(savedFeedback, FeedbackResponse.class);
        } catch (Exception e) {
            throw new FeedbackException("Error while adding feedback. Please try again later.");
        }	}
	

	 @Override
	    public List<FeedbackResponse> getFeedbackByEmployeeId(Long employeeId) {
	        try {
	            List<Feedback> feedbackList = feedbackRepository.findByEmployeeId(employeeId);
	            if (feedbackList.isEmpty()) {
	                throw new FeedbackException("No feedback found for employee with ID: " + employeeId);
	            }
	            return feedbackList.stream()
	                               .map(feedback -> modelMapper.map(feedback, FeedbackResponse.class))
	                               .collect(Collectors.toList());
	        } catch (Exception e) {
	            throw new FeedbackException("Error while retrieving feedback for employee with ID: " + employeeId);
	        }
	    }
	 
	 @Override
	    public FeedbackResponse getLatestFeedbackByEmployeeId(Long employeeId) {
	        try {
	            Feedback feedback = feedbackRepository.findTopByEmployeeIdOrderByFeedbackIdDesc(employeeId);
	            if (feedback == null) {
	                throw new FeedbackException("No feedback found for employee with ID: " + employeeId);
	            }
	            return modelMapper.map(feedback, FeedbackResponse.class);
	        } catch (Exception e) {
	            throw new FeedbackException("Error while retrieving single feedback for employee with ID: " + employeeId);
	        }
	        
	        
	        boolean doesFeedbackExistForEmployee(Long employeeId) {
	            return feedbackRepository.existsByEmployeeId(employeeId);
	        }
	        
	    }
	
	

}
