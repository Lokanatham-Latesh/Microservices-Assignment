package com.mindfire.performancereviewservice.service.imp;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mindfire.performancereviewservice.entity.Feedback;
import com.mindfire.performancereviewservice.exception.FeedbackException;
import com.mindfire.performancereviewservice.repository.FeedbackRepository;
import com.mindfire.performancereviewservice.request.FeedbackRequest;
import com.mindfire.performancereviewservice.response.FeedbackResponse;
import com.mindfire.performancereviewservice.service.FeedbackService;


@Service
public class FeedbackServiceImp implements FeedbackService {

	@Autowired
	private FeedbackRepository feedbackRepository;

	@Autowired
	private ModelMapper modelMapper;

	@Override
	public FeedbackResponse addFeedback(FeedbackRequest feedbackRequest) {
		try {
			Feedback feedback = modelMapper.map(feedbackRequest, Feedback.class);
			Feedback savedFeedback = feedbackRepository.save(feedback);
			return modelMapper.map(savedFeedback, FeedbackResponse.class);
		} catch (Exception e) {
			throw new FeedbackException("Error while adding feedback. Please try again later.");
		}
	}

	@Override
	public List<FeedbackResponse> getFeedbackByEmployeeId(Long employeeId) {
		try {
			List<Feedback> feedbackList = feedbackRepository.findByEmployeeId(employeeId);
			if (feedbackList.isEmpty()) {
				throw new FeedbackException("No feedback found for employee with ID: " + employeeId);
			}
			return feedbackList.stream().map(feedback -> modelMapper.map(feedback, FeedbackResponse.class))
					.collect(Collectors.toList());
		} catch (Exception e) {
			throw new FeedbackException("Error while retrieving feedback for employee with ID: " + employeeId);
		}
	}

	@Override
	public FeedbackResponse getLatestFeedbackByEmployeeId(Long employeeId) {
		try {
			Feedback feedback = feedbackRepository.findTopByEmployeeIdOrderByFeedbackIdDesc(employeeId);
			if (feedback == null) {
				throw new FeedbackException("No feedback found for employee with ID: " + employeeId);
			}
			return modelMapper.map(feedback, FeedbackResponse.class);
		} catch (Exception e) {
			throw new FeedbackException("Error while retrieving single feedback for employee with ID: " + employeeId);
		}

	}

	private boolean doesFeedbackExistForEmployee(Long employeeId) {
		return feedbackRepository.existsByEmployeeId(employeeId);
	}

	@Override
	public List<FeedbackResponse> getFeedbacksForEmployeeList(List<Long> employeeIds) {
	    try {
	        // Filtering employee IDs where feedback exists
	        List<Long> validEmployeeIds = employeeIds.stream()
	                .filter(this::doesFeedbackExistForEmployee)
	                .collect(Collectors.toList());
	        
	        // Identifying invalid employee IDs
	        List<Long> invalidEmployeeIds = employeeIds.stream()
	                .filter(id -> !validEmployeeIds.contains(id))
	                .collect(Collectors.toList());

	        if (validEmployeeIds.isEmpty()) {
	            throw new FeedbackException("No feedback found for the given list of employee IDs.");
	        }

	        if (!invalidEmployeeIds.isEmpty()) {
	            String invalidIdsMessage = "Invalid employee IDs: " + invalidEmployeeIds;
	            throw new FeedbackException(invalidIdsMessage);
	        }

	        List<Feedback> feedbacks = feedbackRepository.findByEmployeeIdIn(validEmployeeIds);
	        
	        return feedbacks.stream()
	                .map(feedback -> modelMapper.map(feedback, FeedbackResponse.class))
	                .collect(Collectors.toList());
	    } catch (Exception e) {
	        throw new FeedbackException("Error while retrieving feedbacks for the list of employee IDs.");
	    }
	}
