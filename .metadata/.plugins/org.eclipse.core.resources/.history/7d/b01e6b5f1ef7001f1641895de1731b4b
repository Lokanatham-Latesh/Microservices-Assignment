package com.mindfire.performancereviewservice.service.imp;

import java.util.List;

import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mindfire.performancereviewservice.entity.Feedback;
import com.mindfire.performancereviewservice.exception.FeedbackException;
import com.mindfire.performancereviewservice.repository.FeedbackRepository;

import com.mindfire.performancereviewservice.service.FeedbackService;
import com.shared.enums.Rating;
import com.shared.request.FeedbackRequest;
import com.shared.response.FeedbackResponse;

@Service
public class FeedbackServiceImpl implements FeedbackService {

    @Autowired
    private FeedbackRepository feedbackRepository;

    @Autowired
    private ModelMapper modelMapper;

    @Override
    public FeedbackResponse addFeedback(FeedbackRequest feedbackRequest) {
        try {
            Feedback feedback = new Feedback();
            feedback.setFeedback(feedbackRequest.getFeedback());
            feedback.setRating(Rating.valueOf(feedbackRequest.getRating().toUpperCase())); 
            feedback.setEmployeeId(feedbackRequest.getEmployeeId());
            Feedback savedFeedback = feedbackRepository.save(feedback);
            return modelMapper.map(savedFeedback, FeedbackResponse.class);
        } catch (Exception e) {
            throw new FeedbackException("Error while adding feedback. Please try again later.");
        }
    }

    @Override
    public List<FeedbackResponse> getFeedbackByEmployeeId(Long employeeId) {
        // Check if feedback exists for the given employeeId
        List<Feedback> feedbackList = feedbackRepository.findByEmployeeId(employeeId);

        // If no feedback is found for the employeeId, throw a custom exception
        if (feedbackList.isEmpty()) {
            throw new FeedbackException("No feedback found for employee with ID: " + employeeId);
        }

        // If feedback is found, map it to FeedbackResponse and return the list
        return modelMapper.map(feedbackList, new TypeToken<List<FeedbackResponse>>() {}.getType());
    }


	@Override
	public FeedbackResponse getLatestFeedbackByEmployeeId(Long employeeId) {
		return null;
	}

	@Override
	public List<FeedbackResponse> getFeedbacksForEmployeeList(List<Long> employeeIds) {
		return null;
	}





   
    
}
