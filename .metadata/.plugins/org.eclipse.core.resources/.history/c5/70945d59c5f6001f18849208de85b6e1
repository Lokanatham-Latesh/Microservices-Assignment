package com.shared.validator;

import com.shared.enums.Rating;
import jakarta.validation.ConstraintValidator;
import jakarta.validation.ConstraintValidatorContext;
import java.util.Arrays;
import java.util.stream.Collectors;

public class RatingValidator implements ConstraintValidator<ValidRating, String> {
    
    private String allowedValues;

    @Override
    public void initialize(ValidRating constraintAnnotation) {
        this.allowedValues = Arrays.stream(Rating.values())
                                   .map(Enum::name)
                                   .collect(Collectors.joining(", "));
    }

    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        if (value == null) return false; // If null, validation fails

        boolean isValid = Arrays.stream(Rating.values())
                                .anyMatch(rating -> rating.name().equalsIgnoreCase(value));

        if (!isValid) {
            context.disableDefaultConstraintViolation();
            context.buildConstraintViolationWithTemplate("Invalid rating: " + value + 
                ". Allowed values: " + allowedValues)
                   .addConstraintViolation();
        }

        return isValid;
    }
}
